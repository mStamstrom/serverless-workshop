# Notes and useful commands

## guided deployment (initial)

sam deploy -g --stack-name poller-backend
sam deploy --stack-name poller-backend

## SAM resource definition for functions

https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html

## set AWS env variables

export AWS_REGION=eu-north-1
export AWS_DEFAULT_REGION=eu-north-1


## Remove a stack from your account 

aws cloudformation delete-stack --stack-name sam-app 

## Describe a stack using CLI

aws cloudformation describe-stacks --stack-name poller-backend

## Query for outputs

aws cloudformation describe-stacks --stack-name poller-backend --query 'Stacks[].Outputs' 

aws cloudformation describe-stacks --stack-name poller-backend --query 'Stacks[].Outputs[?OutputKey==`APIURL`].OutputValue'  --output text

aws cloudformation describe-stacks --stack-name poller-backend --query 'Stacks[].Outputs[]' --output table


## Start the API locally

sam local start-api

sam local start-api -d 5858

## install eslint

npm i -g eslint

## validate JS code

eslint directory (eg eslint . for current dir)

## validate template

cfn-lint template.yaml

sam validate

## initialise Node project (for tests)

npm i

## run Node tests from ex1.test.js (inside the tests dir)

npm t ex1.test

## Run only tests from a specific file

npm t part-of-filename

## Run only tests with a specific description

npm t -t "description"

## Turn JS object into string

JSON.stringify(event, null, 2)

## extract logs locally

sam logs -n PollManagementFunction --stack-name poller-backend

## Turn string into JS object

JSON.parse(text)

## Lambda context

https://docs.aws.amazon.com/lambda/latest/dg/nodejs-context.html

## Unique request ID

context.awsRequestId

## Define a Dynamo table using cloudformation

  PollingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "pollId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "pollId"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      SSESpecification:
        SSEEnabled: true

## CloudFormation resource for DynamoDB

https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html

## CloudFormation functions

!Ref PollingTable
!GetAtt PollingTable.Arn
!Sub "something-${PollingTable}-something else"
!Sub "something-${PollingTable.Arn}-something else"

## Dynamo document client

https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html

## Allow a function to write/read Dynamo data

  PollManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
            Resource: !GetAtt PollingTable.Arn

## Dynamo IAM policies

https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazondynamodb.html

## Tell the function about the database name 

  PollManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          POLLINGTABLE: !Ref PollingTable
   

## retrieve an environment variable in JS

const dbName = process.env.POLLINGTABLE;

## run/debug locally with variables

sam local start-api --env-vars tests/env.json

## generic paths in API Gateway

  PollManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ReadPollEvent:
          Type: Api
          Properties:
            Path: /polls/{pollId}
            Method: get

## access path parameters in Lambda

event.pathParameters.pollId

## access current request http method

event.httpMethod

## save an item to dynamodb

await dynamoDbClient.put({Item: itemToSave}).promise();

## read an item from dynamodb

const response = await dynamoDbClient.get({Key: key, ConsistentRead: readFromPrimaryPartition}).promise();
return response?.Item;

## query cloudwatch insights

fields action, pollId, @timestamp
| filter action = 'create'
| sort @timestamp desc
| limit 20

## Cloudwatch insights query language docs

https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html

